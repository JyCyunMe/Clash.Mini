name: Release Windows
on:
  push:
    branches:
      - release
      - pre-release
  pull_request:
    branches:
      - release
      - pre-release
#    tags:
#      - "v*.*.*"

env:
  go-version: '^1.16.4'
  go-stable: 'true'
  artifact-retention-days: 5

jobs:
  build-release-windows:
    name: Build (Pre)Release Windows
    runs-on: windows-latest
    if: ${{ !contains(github.event.head_commit.message, '[Skip CI]') }}
    outputs:
      git-tag: ${{ steps.configurate-build-inforamtion.outputs.git-tag }}
      release-pkg-x64: ${{ steps.prepare-to-compression.outputs.release-pkg-x64 }}
      release-pkg-x86: ${{ steps.prepare-to-compression.outputs.release-pkg-x86 }}
    steps:
      # ÊãâÂèñÈ°πÁõÆ‰ª£Á†Å
      - name: Checkout üîÄ
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          fetch-depth: 0

      #      # Shell Check
      #      - name: Run ShellCheck
      #        uses: ludeeus/action-shellcheck@master
      #        with:
      #          scandir: './.github/scripts'

      # Ëé∑ÂèñGit‰ø°ÊÅØ
      - name: Get Git Info üí°
        shell: pwsh
        run: |
          echo "WORKDIR=$pwd" >> $env:GITHUB_ENV
          $GIT_BRANCH=$env:GITHUB_REF -replace "refs/heads/", ""
          $VERSION_REGEXP="^v?\d+\.\d+\.\d+(\.\d+)?(-pre)?$"
          $VERSION_RELEASE_REGEXP="^v?\d+\.\d+\.\d+(\.\d+)?$"
          $VERSION_PRE_REGEXP="^v?\d+\.\d+\.\d+(\.\d+)?-pre$"
          echo "VERSION_REGEXP=$VERSION_REGEXP" >> $env:GITHUB_ENV
          echo "VERSION_RELEASE_REGEXP=$VERSION_RELEASE_REGEXP" >> $env:GITHUB_ENV
          echo "VERSION_PRE_REGEXP=$VERSION_PRE_REGEXP" >> $env:GITHUB_ENV
          $GIT_BRANCH=$env:GITHUB_REF -replace "refs/heads/", ""
          echo "GIT_BRANCH=$GIT_BRANCH" >> $env:GITHUB_ENV
          echo "Current Branch: $GIT_BRANCH"

          $SHORT_SHA=${env:GITHUB_SHA}.Substring(0,7)
          echo "SHORT_SHA=$SHORT_SHA" >> $env:GITHUB_ENV
          echo "Current commit hash id: ${env:GITHUB_SHA} ($SHORT_SHA)"

          $GIT_TAG_RELEASE_VERSION=git tag -l | where { $_ -match $VERSION_RELEASE_REGEXP } | sort -descending -top 1
          $GIT_TAG_PRE_VERSION=git tag -l | where { $_ -match $VERSION_PRE_REGEXP } | sort -descending -top 1
          if ($GIT_TAG_PRE_VERSION -eq $GIT_TAG_RELEASE_VERSION + "-pre") { $GIT_TAG_LATEST=$GIT_TAG_RELEASE_VERSION }
            else { $GIT_TAG_LATEST=@($GIT_TAG_RELEASE_VERSION, $GIT_TAG_PRE_VERSION) | sort -descending -top 1 }
          echo "GIT_TAG_LATEST=$GIT_TAG_LATEST" >> $env:GITHUB_ENV
          echo "Latest Tag: $GIT_TAG_LATEST"
          dir "C:\Program Files"
          dir "C:\Program Files (x86)"

      # ÈÖçÁΩÆÊûÑÂª∫‰ø°ÊÅØ
      - id: configurate-build-inforamtion
        name: Configurate Build Information üñ®
        if: success()
        shell: pwsh
        run: pwsh -f .\.github\scripts\steps\publish\2_configuration.ps1

      # ÊûÑÂª∫ÂâçÊ£ÄÊü•
      - name: Check on Failures ‚ùå
        if: success()
        shell: pwsh
        run: pwsh -f .\.github\scripts\steps\publish\3_checks.ps1

      # ÂáÜÂ§áÂèëÂ∏ÉPreReleaseÊñá‰ª∂
      - id: prepare-pre-release
        name: Prepare to Publish PreRelease üïπ
        if: ${{ env.GIT_BRANCH != 'release' && success() }}
        shell: pwsh
        run: pwsh -f .\.github\scripts\steps\publish\4_prepare_pre.ps1

      # ‰∏ä‰º†64‰ΩçÂ∫îÁî®Âà∞Actions Artifacts
      - name: Upload x64 Application to Artifacts üì§
        if: ${{ steps.prepare-pre-release.outcome == 'success' }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.BUILD_X64_FILENAME }}
          path: ${{ env.PUBLISH_PATH }}\*_x64.exe
          if-no-files-found: error
          retention-days: ${{ env.artifact-retention-days }}

      # ‰∏ä‰º†32‰ΩçÂ∫îÁî®Âà∞Actions Artifacts
      - name: Upload x86 Application to Artifacts üì§
        if: ${{ steps.prepare-pre-release.outcome == 'success' && success() }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.BUILD_X86_FILENAME }}
          path: ${{ env.PUBLISH_PATH }}\*_x86.exe
          if-no-files-found: error
          retention-days: ${{ env.artifact-retention-days }}

      # ÂáÜÂ§áÂèëÂ∏ÉReleaseÊñá‰ª∂
      - name: Prepare to Publish Release üïπ
        if: ${{ env.GIT_BRANCH == 'release' && success() }}
        shell: pwsh
        run: pwsh -f .\.github\scripts\steps\publish\5_prepare_release.ps1

      # ÂáÜÂ§áÂéãÁº©
      - id: prepare-to-compression
        name: Prepare to Compression üïπ
        if: success()
        shell: pwsh
        run: pwsh -f .\.github\scripts\steps\publish\6_prepare_compress.ps1

      # ÂéãÁº©ÊâìÂåÖ
      - name: Compression x64 üì¶
        if: success()
        shell: pwsh
        run: |
          7z a -t7z -mx=9 ${env:RELEASE_PKG_X64} ${env:PUBLISH_PATH_X64}\*
          7z a -t7z -mx=9 ${env:RELEASE_PKG_X86} ${env:PUBLISH_PATH_X86}\*
          ls $env:RELEASE_PATH

      # ÁîüÊàêRelease Hash
      - name: Hash Releases ‚å®
        if: success()
        shell: pwsh
        run: |
          echo (Get-FileHash ${env:RELEASE_PKG_X64} -Algorithm SHA256).Hash > "${env:RELEASE_PKG_X64}.sha256"
          echo (Get-FileHash ${env:RELEASE_PKG_X86} -Algorithm SHA256).Hash > "${env:RELEASE_PKG_X86}.sha256"
          ls $env:RELEASE_PATH

  #
  #      # ÂèëÂ∏ÉÂà∞Releases
  #      - name: Publish to Releases üí∏
  #        if: success()
  #        uses: ncipollo/release-action@v1
  #        with:
  #          prerelease: ${{ env.GIT_BRANCH != 'release' }}
  #          tag: ${{ env.GIT_TAG }}
  #          artifacts: ${{ env.RELEASE_PATH }}\Clash.Mini*
  #          #          bodyFile: .\CHANGELOG.md
  #          bodyFile: .\RELEASELOG.md
  #          token: ${{ secrets.ACTION_ACCESS_TOKEN }}

  notifaction:
    name: Notification
    runs-on: ubuntu-latest
    needs: build-release-windows
    env:
      CHAT_ID: 795241172
    steps:
      # ÊãâÂèñÈ°πÁõÆ‰ª£Á†Å
      - name: Checkout üîÄ
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          fetch-depth: 1

      # Êé®ÈÄÅÂà∞TG
      - name: Push to TG üì∞
        if: success()
        shell: bash
        run: |
          IS_OK=true
          if [ $IS_OK ]; then
            MSG_ID=$(echo $RLT | jq ".result.message_id")
            DT_STR=$(date "+%Y%m%d%H%M%S")
            PART_X64=$(echo "${DT_STR}_Clash.Mini_X64" | base64 | tr -s "=" 2)
            PART_X86=$(echo "${DT_STR}_Clash.Mini_X86" | base64 | tr -s "=" 2)

            RELEASE_PKG_X64=${{ needs.build-release-windows.outputs.release-pkg-x64 }}
            RELEASE_PKG_X86=${{ needs.build-release-windows.outputs.release-pkg-x86 }}
            RELEASE_URL="https://github.com/JyCyunMe/Clash.Mini/releases/download/${{ needs.build-release-windows.outputs.git-tag }}"
            echo $RELEASE_URL
            RELEASE_PATH="$(pwd)/releases"
            mkdir -p $RELEASE_PATH
            echo "${RELEASE_URL}/${RELEASE_PKG_X64}"
            echo "${RELEASE_URL}/${RELEASE_PKG_X86}"
            echo "${RELEASE_URL}/${RELEASE_PKG_X64}.sha256"
            echo "${RELEASE_URL}/${RELEASE_PKG_X86}.sha256"
            curl -o "${RELEASE_PATH}/${RELEASE_PKG_X64}" "${RELEASE_URL}/${RELEASE_PKG_X64}"
            curl -o "${RELEASE_PATH}/${RELEASE_PKG_X86}" "${RELEASE_URL}/${RELEASE_PKG_X86}"
            curl -o "${RELEASE_PATH}/${RELEASE_PKG_X64}.sha256" "${RELEASE_URL}/${RELEASE_PKG_X64}.sha256"
            curl -o "${RELEASE_PATH}/${RELEASE_PKG_X86}.sha256" "${RELEASE_URL}/${RELEASE_PKG_X86}.sha256"
            ls -lah $RELEASE_PATH
            cat "${RELEASE_PATH}/${RELEASE_PKG_X86}"
            cat "${RELEASE_PATH}/${RELEASE_PKG_X64}.sha256"

            RELEASE_SHA256_X64=$(cat "${RELEASE_PATH}/${RELEASE_PKG_X64}.sha256")
            RELEASE_SHA256_X86=$(cat "${RELEASE_PATH}/${RELEASE_PKG_X86}.sha256")
            RLT=(curl --location --request POST https://api.telegram.org/bot${{ secrets.TG_TOKEN }}/sendMediaGroup -s --form-string chat_id=${{ env.CHAT_ID }} --form-string reply_to_message_id=$MSG_ID --form $PART_X64=@"${RELEASE_PATH}/{$RELEASE_PKG_X64}" --form $PART_X86=@"${RELEASE_PATH}/{$RELEASE_PKG_X86}" --form-string media="[{\"type\": \"document\",\"media\": \"attach://$PART_X64\",\"caption\": \"SHA256: ${RELEASE_SHA256_X64}\",\"parse_mode\": \"Markdown\"},{\"type\": \"document\",\"media\": \"attach://$PART_X86\",\"caption\": \"SHA256: ${RELEASE_SHA256_X64}\",\"parse_mode\": \"Markdown\"}]")
            IS_OK=$(echo $RLT | jq ".ok")
            if [ ! -e $IS_OK ]; then
              echo "Reply files to channel failed. Response: "
              echo $RLT | jq .
              exit 1
            fi
          else
            echo "push to channel failed. Response: "
            echo $RLT | jq .
            exit 1
          fi
#        run: bash ./.github/scripts/steps/notification/1_push_tg.sh
#        env:
#          TG_TOKEN: ${{ secrets.TG_TOKEN }}
#          GIT_TAG: ${{ needs.build-release-windows.outputs.git-tag }}
#          RELEASE_PATH: ${{ needs.build-release-windows.outputs.release-path }}

#      # ÁºìÂ≠òBuildÊñá‰ª∂
#      - name: Cache node modules
#        uses: actions/cache@v2
#        env:
#          cache-name: cache-build-release
#        with:
#          path: ${{ env.PUBLISH_PATH }}
#          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
#          restore-keys: |
#            ${{ runner.os }}-build-${{ env.cache-name }}-
#            ${{ runner.os }}-build-
#            ${{ runner.os }}-
#
#  notifaction:
#    name: Notification
#    runs-on: ubuntu-latest
#    needs: build-release-windows
#    steps:
#      - name: Download Release üì¶
#        uses: Legion2/download-release-action@v2.1.0
#        with:
#          repository: JyCyunMe/Clash.Mini
#          tag: ${{ jobs.build-release-windows.env.GIT_TAG }}
#          path: ./release
#          token: ${{ secrets.ACTION_ACCESS_TOKEN }}
#
#      - name: Send to TG üí°
#        uses: appleboy/telegram-action@master
#        with:
#          to: JyCyun
#          token: ${{ secrets.TG_TOKEN }}
#          message: "test release \nSee full in https://github.com/JyCyunMe/Clash.Mini/releases/tag/${{ env.GIT_TAG }}"
#          disable_web_page_preview: true
#          document: ./release/Clash.Mini*
