name: Release Windows
on:
  push:
    branches:
      - release
      - pre-release
  pull_request:
    branches:
      - release
      - pre-release
#    tags:
#      - "v*.*.*"

env:
  go-version: '^1.16.4'
  go-stable: 'true'
  artifact-retention-days: 5
  chat-id: 795241172

jobs:
  build-release-windows:
    name: Build (Pre)Release Windows
    runs-on: windows-latest
    if: ${{ !contains(github.event.head_commit.message, '[Skip CI]') }}
    steps:
      # ÊãâÂèñÈ°πÁõÆ‰ª£Á†Å
      - name: Checkout üîÄ
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          fetch-depth: 0

      # Ëé∑ÂèñGit‰ø°ÊÅØ
      - name: Get Git Info üí°
        shell: pwsh
        run: |
          $VERSION_REGEXP="^v?\d+\.\d+\.\d+(\.\d+)?(-pre)?$"
          $VERSION_RELEASE_REGEXP="^v?\d+\.\d+\.\d+(\.\d+)?$"
          $VERSION_PRE_REGEXP="^v?\d+\.\d+\.\d+(\.\d+)?-pre$"
          echo "VERSION_REGEXP=$VERSION_REGEXP" >> $env:GITHUB_ENV
          echo "VERSION_RELEASE_REGEXP=$VERSION_RELEASE_REGEXP" >> $env:GITHUB_ENV
          echo "VERSION_PRE_REGEXP=$VERSION_PRE_REGEXP" >> $env:GITHUB_ENV
          $GIT_BRANCH=$env:GITHUB_REF -replace "refs/heads/", ""
          echo "GIT_BRANCH=$GIT_BRANCH" >> $env:GITHUB_ENV
          echo "Current Branch: $GIT_BRANCH"

          $SHORT_SHA=${env:GITHUB_SHA}.Substring(0,7)
          echo "SHORT_SHA=$SHORT_SHA" >> $env:GITHUB_ENV
          echo "Current commit hash id: ${env:GITHUB_SHA} ($SHORT_SHA)"

          $GIT_TAG_RELEASE_VERSION=git tag -l | where { $_ -match $VERSION_RELEASE_REGEXP } | sort -descending -top 1
          $GIT_TAG_PRE_VERSION=git tag -l | where { $_ -match $VERSION_PRE_REGEXP } | sort -descending -top 1
          if ($GIT_TAG_PRE_VERSION -eq $GIT_TAG_RELEASE_VERSION + "-pre") { $GIT_TAG_LATEST=$GIT_TAG_RELEASE_VERSION }
            else { $GIT_TAG_LATEST=@($GIT_TAG_RELEASE_VERSION, $GIT_TAG_PRE_VERSION) | sort -descending -top 1 }
          echo "GIT_TAG_LATEST=$GIT_TAG_LATEST" >> $env:GITHUB_ENV
          echo "Latest Tag: $GIT_TAG_LATEST"

      # ÈÖçÁΩÆÊûÑÂª∫‰ø°ÊÅØ
      - name: Configurate Build Information üñ®
        if: success()
        shell: pwsh
        run: |
          $BUILD_PATH="$pwd\build"
          $PUBLISH_PATH="$BUILD_PATH\publish"
          echo "BUILD_PATH=$BUILD_PATH" >> $env:GITHUB_ENV
          echo "PUBLISH_PATH=$PUBLISH_PATH" >> $env:GITHUB_ENV

          $BUILD_VERSION=(cat .\versioninfo.json | jq -r ".StringFileInfo.ProductVersion")
          echo "BUILD_VERSION=$BUILD_VERSION" >> $env:GITHUB_ENV
          echo "Build Version: v$BUILD_VERSION"
          $GIT_TAG="v$BUILD_VERSION$(${env:GIT_BRANCH} -ne 'release' ? '-pre' : '')"
          echo "GIT_TAG=$GIT_TAG" >> $env:GITHUB_ENV
          echo "Current Tag: $GIT_TAG"

      # ÊûÑÂª∫ÂâçÊ£ÄÊü•
      - name: Check on Failures ‚ùå
        if: success()
        shell: pwsh
        run: |
          $NOT_PASSED=0
          echo "Build Version: v${env:BUILD_VERSION}`nCurrent Tag: ${env:GIT_TAG}`nLatest Tag: ${env:GIT_TAG_LATEST}`n"
          if (!(${env:GIT_TAG} -match ${env:VERSION_REGEXP}) -or ${env:GIT_TAG} -eq "") {
            $NOT_PASSED=1
            echo "Cannot get the version information or it's incorrect."
          }

          if ($NOT_PASSED -eq 0) {
            $INTERNAL_VERSION_REGEXP="^(\d+\.\d+\.\d+)(\.\d+)?$"
            $fileVersion=(cat .\versioninfo.json | jq -r ".FixedFileInfo.FileVersion")
            $fileVersion=(echo $fileVersion | jq -r ".Major, .Minor, .Patch, .Build") -join "."
            $tmpVer=[regex]::Match($fileVersion, $INTERNAL_VERSION_REGEXP)
            if (!$tmpVer.success) {
              $NOT_PASSED=1
            } else {
              $fileVersion=$tmpVer.Groups[1].Value
              if ($tmpVer.Groups[2].Value -ne ".0") { $fileVersion+=$tmpVer.Groups[2].Value}
            }

            if ($NOT_PASSED -eq 0) {
              $productVersion=(cat .\versioninfo.json | jq -r ".FixedFileInfo.ProductVersion")
              $productVersion=(echo $productVersion | jq -r ".Major, .Minor, .Patch, .Build") -join "."
              $tmpVer=[regex]::Match($productVersion, $INTERNAL_VERSION_REGEXP)
              if (!$tmpVer.success) {
                $NOT_PASSED=1
              } else {
                $productVersion=$tmpVer.Groups[1].Value
                if ($tmpVer.Groups[2].Value -ne ".0") { $productVersion+=$tmpVer.Groups[2].Value}
              }
            }
          }

          if (($NOT_PASSED -eq 0) -and (($productVersion -ne $fileVersion) -or (${env:BUILD_VERSION} -ne $productVersion))) {
            $NOT_PASSED=1
            echo "The version information has some differences.`nPlease check `"versioninfo.json`""
          }

          if (($NOT_PASSED -eq 0) -and ((${env:GIT_TAG_LATEST} -ne "" -and ${env:GIT_TAG}.replace("-pre", "") -lt ${env:GIT_TAG_LATEST}.replace("-pre", "") -or
            (${env:GIT_TAG}.replace("-pre", "") -eq ${env:GIT_TAG_LATEST}.replace("-pre", "") -and (${env:GIT_TAG}.contains("-pre") -or !${env:GIT_TAG_LATEST}.contains("-pre")))))) {
              $NOT_PASSED=1
              echo "A newer or the current version already exists."
          }
          if ($NOT_PASSED -ne 0) {
            echo "Check the version information is not passed."
            echo "This build has been aborted."
            exit 1
          }
          mkdir -p ${env:BUILD_PATH}
          echo "" > ${env:BUILD_PATH}\Clash.Mini_x64.exe
          echo "" > ${env:BUILD_PATH}\Clash.Mini_x86.exe

      # ÂáÜÂ§áÂèëÂ∏ÉPreReleaseÊñá‰ª∂
      - id: prepare-pre-release
        name: Prepare to Publish PreRelease üïπ
        if: ${{ env.GIT_BRANCH != 'release' && success() }}
        shell: pwsh
        run: |
          cd $env:BUILD_PATH
          mkdir -p $env:PUBLISH_PATH
          $BUILD_X64_FILENAME="Clash.Mini_${env:GIT_BRANCH}_v${env:BUILD_VERSION}_x64.exe"
          $BUILD_X86_FILENAME="Clash.Mini_${env:GIT_BRANCH}_v${env:BUILD_VERSION}_x86.exe"
          echo "BUILD_X64_FILENAME=$BUILD_X64_FILENAME" >> $env:GITHUB_ENV
          echo "BUILD_X86_FILENAME=$BUILD_X86_FILENAME" >> $env:GITHUB_ENV
          cp .\Clash.Mini_*.exe $env:PUBLISH_PATH\
          echo "Ready to upload the following file(s):"
          ls $env:PUBLISH_PATH

      # ‰∏ä‰º†64‰ΩçÂ∫îÁî®Âà∞Actions Artifacts
      - name: Upload x64 Application to Artifacts üì§
        if: ${{ steps.prepare-pre-release.outcome == 'success' }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.BUILD_X64_FILENAME }}
          path: ${{ env.PUBLISH_PATH }}\*_x64.exe
          if-no-files-found: error
          retention-days: ${{ env.artifact-retention-days }}

      # ‰∏ä‰º†32‰ΩçÂ∫îÁî®Âà∞Actions Artifacts
      - name: Upload x86 Application to Artifacts üì§
        if: ${{ steps.prepare-pre-release.outcome == 'success' && success() }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.BUILD_X86_FILENAME }}
          path: ${{ env.PUBLISH_PATH }}\*_x86.exe
          if-no-files-found: error
          retention-days: ${{ env.artifact-retention-days }}

      # ÂáÜÂ§áÂèëÂ∏ÉReleaseÊñá‰ª∂
      - name: Prepare to Publish Release üïπ
        if: ${{ env.GIT_BRANCH == 'release' && success() }}
        shell: pwsh
        run: |
          cd $env:BUILD_PATH
          cp .\Clash.Mini_*.exe ${env:PUBLISH_PATH}\
          echo "Ready to upload the following file(s):"
          ls ${env:PUBLISH_PATH}

      # ÂáÜÂ§áÂéãÁº©
      - name: Prepare to Compression üïπ
        if: success()
        shell: pwsh
        run: |
          cd $env:BUILD_PATH
          mkdir -p ($PUBLISH_PATH_X64="${env:PUBLISH_PATH}\x64")
          mkdir -p ($PUBLISH_PATH_X86="${env:PUBLISH_PATH}\x86")
          echo "PUBLISH_PATH_X64=$PUBLISH_PATH_X64" >> $env:GITHUB_ENV
          echo "PUBLISH_PATH_X86=$PUBLISH_PATH_X86" >> $env:GITHUB_ENV
          mkdir -p .\Profile
          $packageFiles=@(".\Profile", "..\config.yaml", "..\Country.mmdb")
          mv ${env:PUBLISH_PATH}\Clash.Mini*64.exe $PUBLISH_PATH_X64\Clash.Mini.exe
          $filesX64=$packageFiles
          foreach ($file in $filesX64) { cp $file $PUBLISH_PATH_X64\ }
          mv ${env:PUBLISH_PATH}\Clash.Mini*86.exe $PUBLISH_PATH_X86\Clash.Mini.exe
          $filesX86=$packageFiles
          foreach ($file in $filesX86) { cp $file $PUBLISH_PATH_X86\ }


          mkdir -p ($RELEASE_PATH="${env:PUBLISH_PATH}\releases")
          echo "RELEASE_PATH=$RELEASE_PATH" >> $env:GITHUB_ENV
          $RELEASE_PKG_X64="$RELEASE_PATH\Clash.Mini_${env:GIT_TAG}_x64.7z"
          $RELEASE_PKG_X86="$RELEASE_PATH\Clash.Mini_${env:GIT_TAG}_x86.7z"
          echo "RELEASE_PKG_X64=$RELEASE_PKG_X64" >> $env:GITHUB_ENV
          echo "RELEASE_PKG_X86=$RELEASE_PKG_X86" >> $env:GITHUB_ENV
      #
      #      # ÂéãÁº©ÊâìÂåÖ
      #      - name: Compression x64 üì¶
      #        if: success()
      #        shell: pwsh
      #        run: |
      #          7z a -t7z -mx=9 ${env:RELEASE_PKG_X64} ${env:PUBLISH_PATH_X64}\*
      #          7z a -t7z -mx=9 ${env:RELEASE_PKG_X86} ${env:PUBLISH_PATH_X86}\*
      #          ls $env:RELEASE_PATH
      #
      #      # ÁîüÊàêRelease Hash
      #      - name: Hash Releases ‚å®
      #        if: success()
      #        shell: pwsh
      #        run: |
      #          echo (Get-FileHash ${env:RELEASE_PKG_X64} -Algorithm SHA256).Hash > "${env:RELEASE_PKG_X64}.sha256"
      #          echo (Get-FileHash ${env:RELEASE_PKG_X86} -Algorithm SHA256).Hash > "${env:RELEASE_PKG_X86}.sha256"
      #          ls $env:RELEASE_PATH
      #
      #      # ÂèëÂ∏ÉÂà∞Releases
      #      - name: Publish to Releases üí∏
      #        if: success()
      #        uses: ncipollo/release-action@v1
      #        with:
      #          prerelease: ${{ env.GIT_BRANCH != 'release' }}
      #          tag: ${{ env.GIT_TAG }}
      #          artifacts: ${{ env.RELEASE_PATH }}\Clash.Mini*
      #          #          bodyFile: .\CHANGELOG.md
      #          bodyFile: .\RELEASELOG.md
      #          token: ${{ secrets.ACTION_ACCESS_TOKEN }}

      # Êé®ÈÄÅÂà∞TG
      - name: Push to TG üì∞
        if: success()
        shell: bash
        run: |
          ls .
          LOG_MARKDOWN=$(cat ./RELEASELOG.md)
          echo $LOG_MARKDOWN
          echo "LOG_MARKDOWN=$LOG_MARKDOWN" >> $GITHUB_ENV
          RLT=$(curl --location --request POST 'https://api.telegram.org/bot${{ secrets.TG_TOKEN }}/sendMessage' --header 'Content-Type: application/json' -s --data-raw '{"chat_id":${{ env.chat-id }},"text":"${{ env.LOG_MARKDOWN }}","parse_mode":"MarkdownV2","disable_web_page_preview":true,"allow_sending_without_reply":true,"reply_markup":{"inline_keyboard":[[{"text":"Download","url":"https://github.com/JyCyunMe/Clash.Mini/releases/tag/${{ env.GIT_TAG }}"},{"text":"GitHub","url":"https://github.com/JyCyunMe/Clash.Mini"}]]}}')
          echo $RLT
          IS_OK=`echo $RLT | jq ".ok"`
          if [[ $IS_OK -eq true ]]; then
            MSG_ID=`echo $RLT | jq ".result.message_id"`
            DT_STR=`date "+%Y%m%d%H%M%S"`
            PART_X64=`echo "${DT_STR}_Clash.Mini_X64" | base64 | tr -s "=" 2`
            PART_X86=`echo "${DT_STR}_Clash.Mini_X86" | base64 | tr -s "=" 2`
          else
            echo "push to channel failed. Response: "
            echo $RLT | jq .
            exit 1
          fi

#      # ÁºìÂ≠òBuildÊñá‰ª∂
#      - name: Cache node modules
#        uses: actions/cache@v2
#        env:
#          cache-name: cache-build-release
#        with:
#          path: ${{ env.PUBLISH_PATH }}
#          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
#          restore-keys: |
#            ${{ runner.os }}-build-${{ env.cache-name }}-
#            ${{ runner.os }}-build-
#            ${{ runner.os }}-
#
#  notifaction:
#    name: Notification
#    runs-on: ubuntu-latest
#    needs: build-release-windows
#    steps:
#      - name: Download Release üì¶
#        uses: Legion2/download-release-action@v2.1.0
#        with:
#          repository: JyCyunMe/Clash.Mini
#          tag: ${{ jobs.build-release-windows.env.GIT_TAG }}
#          path: ./release
#          token: ${{ secrets.ACTION_ACCESS_TOKEN }}
#
#      - name: Send to TG üí°
#        uses: appleboy/telegram-action@master
#        with:
#          to: JyCyun
#          token: ${{ secrets.TG_TOKEN }}
#          message: "test release \nSee full in https://github.com/JyCyunMe/Clash.Mini/releases/tag/${{ env.GIT_TAG }}"
#          disable_web_page_preview: true
#          document: ./release/Clash.Mini*
