name: Release Windows
on:
  push:
    branches:
      - release
      - pre-release
  pull_request:
    branches:
      - release
      - pre-release
#    tags:
#      - "v*.*.*"

env:
  go-version: '^1.16.4'
  go-stable: 'true'
  artifact-retention-days: 5

jobs:
  build-release-windows:
    name: Build (Pre)Release Windows
    runs-on: windows-latest
    if: ${{ !contains(github.event.head_commit.message, '[Skip CI]') }}
    outputs:
      git-tag: ${{ steps.configurate-build-inforamtion.outputs.git-tag }}
      release-path: ${{ steps.prepare-to-compression.outputs.release-path }}
    steps:
      # 拉取项目代码
      - name: Checkout 🔀
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          fetch-depth: 0

      #      # Shell Check
      #      - name: Run ShellCheck
      #        uses: ludeeus/action-shellcheck@master
      #        with:
      #          scandir: './.github/scripts'

      # 获取Git信息
      - name: Get Git Info 💡
        shell: pwsh
        run: |
          echo "WORKDIR=$pwd" >> $env:GITHUB_ENV
          $GIT_BRANCH=$env:GITHUB_REF -replace "refs/heads/", ""
          $VERSION_REGEXP="^v?\d+\.\d+\.\d+(\.\d+)?(-pre)?$"
          $VERSION_RELEASE_REGEXP="^v?\d+\.\d+\.\d+(\.\d+)?$"
          $VERSION_PRE_REGEXP="^v?\d+\.\d+\.\d+(\.\d+)?-pre$"
          echo "VERSION_REGEXP=$VERSION_REGEXP" >> $env:GITHUB_ENV
          echo "VERSION_RELEASE_REGEXP=$VERSION_RELEASE_REGEXP" >> $env:GITHUB_ENV
          echo "VERSION_PRE_REGEXP=$VERSION_PRE_REGEXP" >> $env:GITHUB_ENV
          $GIT_BRANCH=$env:GITHUB_REF -replace "refs/heads/", ""
          echo "GIT_BRANCH=$GIT_BRANCH" >> $env:GITHUB_ENV
          echo "Current Branch: $GIT_BRANCH"

          $SHORT_SHA=${env:GITHUB_SHA}.Substring(0,7)
          echo "SHORT_SHA=$SHORT_SHA" >> $env:GITHUB_ENV
          echo "Current commit hash id: ${env:GITHUB_SHA} ($SHORT_SHA)"

          $GIT_TAG_RELEASE_VERSION=git tag -l | where { $_ -match $VERSION_RELEASE_REGEXP } | sort -descending -top 1
          $GIT_TAG_PRE_VERSION=git tag -l | where { $_ -match $VERSION_PRE_REGEXP } | sort -descending -top 1
          if ($GIT_TAG_PRE_VERSION -eq $GIT_TAG_RELEASE_VERSION + "-pre") { $GIT_TAG_LATEST=$GIT_TAG_RELEASE_VERSION }
            else { $GIT_TAG_LATEST=@($GIT_TAG_RELEASE_VERSION, $GIT_TAG_PRE_VERSION) | sort -descending -top 1 }
          echo "GIT_TAG_LATEST=$GIT_TAG_LATEST" >> $env:GITHUB_ENV
          echo "Latest Tag: $GIT_TAG_LATEST"
          dir "C:\Program Files"
          dir "C:\Program Files (x86)"

      # 配置构建信息
      - id: configurate-build-inforamtion
        name: Configurate Build Information 🖨
        if: success()
        shell: pwsh
        run: pwsh -f .\.github\scripts\steps\publish\2_configuration.ps1

      # 构建前检查
      - name: Check on Failures ❌
        if: success()
        shell: pwsh
        run: pwsh -f .\.github\scripts\steps\publish\3_checks.ps1

      # 准备发布PreRelease文件
      - id: prepare-pre-release
        name: Prepare to Publish PreRelease 🕹
        if: ${{ env.GIT_BRANCH != 'release' && success() }}
        shell: pwsh
        run: pwsh -f .\.github\scripts\steps\publish\4_prepare_pre.ps1

      # 上传64位应用到Actions Artifacts
      - name: Upload x64 Application to Artifacts 📤
        if: ${{ steps.prepare-pre-release.outcome == 'success' }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.BUILD_X64_FILENAME }}
          path: ${{ env.PUBLISH_PATH }}\*_x64.exe
          if-no-files-found: error
          retention-days: ${{ env.artifact-retention-days }}

      # 上传32位应用到Actions Artifacts
      - name: Upload x86 Application to Artifacts 📤
        if: ${{ steps.prepare-pre-release.outcome == 'success' && success() }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.BUILD_X86_FILENAME }}
          path: ${{ env.PUBLISH_PATH }}\*_x86.exe
          if-no-files-found: error
          retention-days: ${{ env.artifact-retention-days }}

      # 准备发布Release文件
      - name: Prepare to Publish Release 🕹
        if: ${{ env.GIT_BRANCH == 'release' && success() }}
        shell: pwsh
        run: pwsh -f .\.github\scripts\steps\publish\5_prepare_release.ps1

      # 准备压缩
      - id: prepare-to-compression
        name: Prepare to Compression 🕹
        if: success()
        shell: pwsh
        run: pwsh -f .\.github\scripts\steps\publish\6_prepare_compress.ps1

      # 压缩打包
      - name: Compression x64 📦
        if: success()
        shell: pwsh
        run: |
          7z a -t7z -mx=9 ${env:RELEASE_PKG_X64} ${env:PUBLISH_PATH_X64}\*
          7z a -t7z -mx=9 ${env:RELEASE_PKG_X86} ${env:PUBLISH_PATH_X86}\*
          ls $env:RELEASE_PATH

      # 生成Release Hash
      - name: Hash Releases ⌨
        if: success()
        shell: pwsh
        run: |
          echo (Get-FileHash ${env:RELEASE_PKG_X64} -Algorithm SHA256).Hash > "${env:RELEASE_PKG_X64}.sha256"
          echo (Get-FileHash ${env:RELEASE_PKG_X86} -Algorithm SHA256).Hash > "${env:RELEASE_PKG_X86}.sha256"
          ls $env:RELEASE_PATH

      # 发布到Releases
      - name: Publish to Releases 💸
        if: success()
        uses: ncipollo/release-action@v1
        with:
          prerelease: ${{ env.GIT_BRANCH != 'release' }}
          tag: ${{ env.GIT_TAG }}
          artifacts: ${{ env.RELEASE_PATH }}\Clash.Mini*
          #          bodyFile: .\CHANGELOG.md
          bodyFile: .\RELEASELOG.md
          token: ${{ secrets.ACTION_ACCESS_TOKEN }}

  notifaction:
    name: Notification
    runs-on: ubuntu-latest
    needs: build-release-windows
    env:
      CHAT_ID: 795241172
    steps:
      # 拉取项目代码
      - name: Checkout 🔀
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          fetch-depth: 1

      # 推送到TG
      - name: Push to TG 📰
        if: success()
        shell: bash
        run: bash ./.github/scripts/steps/notification/1_push_tg.sh
        env:
          TG_TOKEN: ${{ secrets.TG_TOKEN }}
          GIT_TAG: ${{ needs.build-release-windows.outputs.git-tag }}
          RELEASE_PATH: ${{ needs.build-release-windows.outputs.release-path }}

#      # 缓存Build文件
#      - name: Cache node modules
#        uses: actions/cache@v2
#        env:
#          cache-name: cache-build-release
#        with:
#          path: ${{ env.PUBLISH_PATH }}
#          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
#          restore-keys: |
#            ${{ runner.os }}-build-${{ env.cache-name }}-
#            ${{ runner.os }}-build-
#            ${{ runner.os }}-
#
#  notifaction:
#    name: Notification
#    runs-on: ubuntu-latest
#    needs: build-release-windows
#    steps:
#      - name: Download Release 📦
#        uses: Legion2/download-release-action@v2.1.0
#        with:
#          repository: JyCyunMe/Clash.Mini
#          tag: ${{ jobs.build-release-windows.env.GIT_TAG }}
#          path: ./release
#          token: ${{ secrets.ACTION_ACCESS_TOKEN }}
#
#      - name: Send to TG 💡
#        uses: appleboy/telegram-action@master
#        with:
#          to: JyCyun
#          token: ${{ secrets.TG_TOKEN }}
#          message: "test release \nSee full in https://github.com/JyCyunMe/Clash.Mini/releases/tag/${{ env.GIT_TAG }}"
#          disable_web_page_preview: true
#          document: ./release/Clash.Mini*
