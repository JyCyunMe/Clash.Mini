name: Build Release
on:
  push:
    branches:
      - release
      - pre-release
  pull_request:
    branches:
      - release
      - pre-release
#    tags:
#      - 'v*.*.*'

env:
  go-version: '^1.16.4'
  go-stable: 'true'
  artifact-retention-days: 5

jobs:
  build-and-publish:
    name: Build & Publish (Pre)Release
    runs-on: windows-latest
    if: ${{ !contains(github.event.head_commit.message, '[Skip CI]') }}
    steps:
      # ÊãâÂèñÈ°πÁõÆ‰ª£Á†Å
      - name: Checkout üîÄ
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          fetch-depth: 0

      # Ëé∑ÂèñGit‰ø°ÊÅØ
      - name: Get Git Info üí°
        shell: pwsh
        run: |
          $GIT_BRANCH=$env:GITHUB_REF -replace 'refs/heads/', ''
          echo "GIT_BRANCH=$GIT_BRANCH" >> $env:GITHUB_ENV
          echo "Current Branch: $GIT_BRANCH"
          echo ($GIT_TAG_VERSION=git tag -l | where { $_ -match '^v?\d+\.\d+\.\d+(\.\d+)?$' } |
            sort -Descending -Top 1)
          echo ($GIT_TAG_PRE_VERSION=git tag -l | where { $_ -match '^v?\d+\.\d+\.\d+(\.\d+)?$' } |
            sort -Descending -Top 1)
          if ($GIT_TAG_PRE_VERSION -eq $GIT_TAG_VERSION + '-pre') { echo "$GIT_TAG_LATEST=$GIT_TAG_VERSION" }
            else { echo ($GIT_TAG_LATEST=@($GIT_TAG_VERSION, $GIT_TAG_PRE_VERSION) | sort -Descending -Top 1) }
          echo "GIT_TAG_LATEST=$GIT_TAG_LATEST" >> $env:GITHUB_ENV
          echo "Latest Tag: $GIT_TAG_LATEST"

      # ÈÖçÁΩÆÊûÑÂª∫‰ø°ÊÅØ
      - name: Configurate Build Information üñ®
        if: success()
        shell: pwsh
        run: |
          $BUILD_PATH="$pwd\build"
          echo "BUILD_PATH=$BUILD_PATH" >> $env:GITHUB_ENV
          $BUILD_VERSION=cat .\versioninfo.json | jq -r '.StringFileInfo.ProductVersion'
          echo "BUILD_VERSION=$BUILD_VERSION" >> $env:GITHUB_ENV
          echo "Build Version: $BUILD_VERSION"
          $GIT_TAG="$BUILD_VERSION$(${env:GIT_BRANCH} -ne 'release' ? '-pre' : '')"
          echo "GIT_TAG=$GIT_TAG" >> $env:GITHUB_ENV
          echo "Current Tag: $GIT_TAG"

      # ÊûÑÂª∫ÂâçÊ£ÄÊü•
      - name: Check on Failures ‚ùå
        if: ${{ env.GIT_TAG_LATEST != '' && env.GIT_TAG_LATEST>= env.GIT_TAG }}
        shell: pwsh
        run: |
          echo "A newer or the current version already exists."
          echo "Latest Tag: $env:GIT_TAG_LATEST, Build Version: $env:BUILD_VERSION"
          echo "This build has been cancelled."
          exit 1

      # ÈÖçÁΩÆGolangÁéØÂ¢É
      - name: Setup Go Environment üìç
        uses: actions/setup-go@v2
        if: success()
        with:
          go-version: ${{ env.go-version }}
          stable: ${{ env.go-stable }}

      # Ëé∑Âèñ‰æùËµñÂåÖ
      - name: Get Go Modules üìü
        if: success()
        shell: pwsh
        run: |
          go version
          go env
          mkdir -p .\build

      # ËøêË°åGolangÊµãËØï
      #  - name: Golang Test ‚úÖ
      #      run: |

      # ÊûÑÂª∫64‰ΩçÂ∫îÁî®
      - name: Build x64 Application üõ†
        if: success()
        shell: pwsh
        run: |
          $env:GOOS="windows"
          $env:GOARCH="amd64"
          ls .\build
          go build -ldflags "-H=windowsgui -s -w" -o .\build\Clash.Mini_x64.exe

      # ÊûÑÂª∫32‰ΩçÂ∫îÁî®
      - name: Build x86 Application üõ†
        if: success()
        shell: pwsh
        run: |
          $env:GOOS="windows"
          $env:GOARCH="386"
          go build -a -v -x -ldflags "-H=windowsgui -s -w" -o .\build\Clash.Mini_x86.exe

      # ÂáÜÂ§áÂèëÂ∏ÉPreReleaseÊñá‰ª∂
      - id: prepare-pre-release
        name: Prepare to Publish PreRelease üïπ
        if: ${{ env.GIT_BRANCH != 'release' && success() }}
        shell: pwsh
        run: |
          cd $env:BUILD_PATH
          mkdir -p .\publish
          $BUILD_X64_FILENAME="Clash.Mini_${env:GIT_BRANCH}_${env:BUILD_VERSION}_x64.exe"
          $BUILD_X86_FILENAME="Clash.Mini_${env:GIT_BRANCH}_${env:BUILD_VERSION}_x86.exe"
          echo "BUILD_X64_FILENAME=$BUILD_X64_FILENAME" >> $env:GITHUB_ENV
          echo "BUILD_X86_FILENAME=$BUILD_X86_FILENAME" >> $env:GITHUB_ENV
          cp .\Clash.Mini_*.exe .\publish\
          echo "Ready to upload the following file(s):"
          ls .\publish

      # ‰∏ä‰º†64‰ΩçÂ∫îÁî®Âà∞Actions Artifacts
      - name: Upload x64 Application to Artifacts üì§
        if: ${{ steps.prepare-pre-release.outcome == 'success' }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.BUILD_X64_FILENAME }}
          path: ${{ env.BUILD_PATH }}\publish\*_x64.exe
          if-no-files-found: error
          retention-days: ${{ env.artifact-retention-days }}

      # ‰∏ä‰º†32‰ΩçÂ∫îÁî®Âà∞Actions Artifacts
      - name: Upload x86 Application to Artifacts üì§
        if: ${{ steps.prepare-pre-release.outcome == 'success' && success() }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.BUILD_X86_FILENAME }}
          path: ${{ env.BUILD_PATH }}\publish\*_x86.exe
          if-no-files-found: error
          retention-days: ${{ env.artifact-retention-days }}

      # ÂáÜÂ§áÂèëÂ∏ÉReleaseÊñá‰ª∂
      - name: Prepare to Publish Release üïπ
        if: ${{ env.GIT_BRANCH == 'release' && success() }}
        shell: pwsh
        run: |
          cd $env:BUILD_PATH
          mkdir -p .\publish
          cp .\Clash.Mini_*.exe .\publish\
          echo "Ready to upload the following file(s):"
          ls .\publish

      # ÂáÜÂ§áÂéãÁº©
      - name: Prepare to Compression üïπ
        if: success()
        shell: pwsh
        run: |
          cd $env:BUILD_PATH
          mkdir -p ($PUBLISH_PATH_X64="${env:BUILD_PATH}\publish\x64")
          mkdir -p ($PUBLISH_PATH_X86="${env:BUILD_PATH}\publish\x86")
          echo "PUBLISH_PATH_X64=$PUBLISH_PATH_X64" >> $env:GITHUB_ENV
          echo "PUBLISH_PATH_X86=$PUBLISH_PATH_X86" >> $env:GITHUB_ENV
          mkdir -p .\Profile
          $packageFiles=@("Profile", "config.yaml", "Country.mmdb")
          mv .\publish\Clash.Mini*64.exe $PUBLISH_PATH_X64\Clash.Mini.exe
          $filesX64=$packageFiles
          foreach ($file in $filesX64) { cp .\$file $PUBLISH_PATH_X64\ }
          mv .\publish\Clash.Mini*86.exe $PUBLISH_PATH_X86\Clash.Mini.exe
          $filesX86=$packageFiles
          foreach ($file in $filesX86) { cp .\$file $PUBLISH_PATH_X86\ }

      # ÂéãÁº©ÊâìÂåÖ
      - name: Compression x64 üì¶
        if: success()
        shell: pwsh
        run: |
          7z a -t7z -mx=9 ${env:BUILD_PATH}\publish\Clash.Mini.${{ env.BUILD_VERSION }}.x64.7z ${env:PUBLISH_PATH_X64}\*
          7z a -t7z -mx=9 ${env:BUILD_PATH}\publish\Clash.Mini.${{ env.BUILD_VERSION }}.x86.7z ${env:PUBLISH_PATH_X86}\*

      # ÂèëÂ∏ÉÂà∞Releases
      - name: Publish to Releases üí∏
        if: success()
        uses: ncipollo/release-action@v1
        with:
          prerelease: ${{ env.GIT_BRANCH != 'release' }}
          tag: ${{ env.GIT_TAG }}
          artifacts: ${{ env.BUILD_PATH }}\publish\Clash.Mini*.7z
          #          bodyFile: .\CHANGELOG.md
          bodyFile: .\RELEASELOG.md
          token: ${{ secrets.ACTION_ACCESS_TOKEN }}
