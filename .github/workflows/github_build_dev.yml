name: Build Dev
on:
  push:
    branches:
      - ci
#      - canary
  pull_request:
    branches:
      - ci
      #- canary

env:
  go-version: '^1.16.4'
  go-stable: 'true'
  artifact-retention-days: 5

jobs:
  build-and-upload:
    name: Build & Upload Dev
    runs-on: windows-latest
    if: ${{ !contains(github.event.head_commit.message, '[Skip CI]') }}
    steps:
      # ÊãâÂèñÈ°πÁõÆ‰ª£Á†Å
      - name: Checkout üîÄ
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          fetch-depth: 0

      # Ëé∑ÂèñGit‰ø°ÊÅØ
      - name: Get Git Info üí°
        shell: pwsh
        run: |
          $GIT_BRANCH=$env:GITHUB_REF -replace 'refs/heads/', ''
          echo "GIT_BRANCH=$GIT_BRANCH" >> $env:GITHUB_ENV
          echo "Current Branch: $GIT_BRANCH"
          $GIT_TAG_LATEST=git tag -l 'v*.*.*' | Sort-Object -Descending -Top 1
          echo "GIT_TAG_LATEST=$GIT_TAG_LATEST" >> $env:GITHUB_ENV
          echo "Latest Tag: $GIT_TAG_LATEST"

      # ÈÖçÁΩÆÊûÑÂª∫‰ø°ÊÅØ
      - name: Configurate Build Information üñ®
        if: success()
        shell: pwsh
        run: |
          $BUILD_PATH="$pwd\build"
          echo "BUILD_PATH=$BUILD_PATH" >> $env:GITHUB_ENV
          $BUILD_VERSION=cat .\versioninfo.json | jq -r '.StringFileInfo.ProductVersion'
          echo "BUILD_VERSION=$BUILD_VERSION" >> $env:GITHUB_ENV
          echo "Build Version: $BUILD_VERSION"

      # ÊûÑÂª∫ÂâçÊ£ÄÊü•
      - name: Check on Failures ‚ùå
        if: ${{ env.GIT_TAG_LATEST != '' && env.GIT_TAG_LATEST >= env.BUILD_VERSION }}
        shell: pwsh
        run: |
          echo "A newer or the current version already exists."
          echo "Latest Tag: $env:GIT_TAG_LATEST, Build Version: $env:BUILD_VERSION"
          echo "This build has been cancelled."
          exit 1

      # ÈÖçÁΩÆGolangÁéØÂ¢É
      - name: Setup Go Environment üìç
        uses: actions/setup-go@v2
        if: success()
        with:
          go-version: ${{ env.go-version }}
          stable: ${{ env.go-stable }}

      # Ëé∑Âèñ‰æùËµñÂåÖ
      - name: Get Go Modules üìü
        if: success()
        shell: pwsh
        run: |
          go version
          go env
          mkdir -p .\build

      # ËøêË°åGolangÊµãËØï
      #  - name: Golang Test ‚úÖ
      #      run: |

      # ÊûÑÂª∫64‰ΩçÂ∫îÁî®
      - name: Build x64 Application üõ†
        if: success()
        shell: pwsh
        run: |
          $env:GOOS="windows"
          $env:GOARCH="amd64"
          go build -a -v -x -ldflags "-H=windowsgui -s -w" -o .\build\Clash.Mini_dev_x64.exe

      # ÊûÑÂª∫32‰ΩçÂ∫îÁî®
      - name: Build x86 Application üõ†
        if: success()
        shell: pwsh
        run: |
          $env:GOOS="windows"
          $env:GOARCH="386"
          go build -a -v -x -ldflags "-H=windowsgui -s -w" -o .\build\Clash.Mini_dev_x86.exe

      # ÂáÜÂ§á‰∏ä‰º†ArtifactÊñá‰ª∂
      - name: Prepare to Upload üïπ
        if: success()
        shell: pwsh
        run: |
          cd $env:BUILD_PATH
          mkdir -p .\publish
          $BUILD_X64_FILENAME="Clash.Mini_${env:GIT_BRANCH}_${env:BUILD_VERSION}_x64.exe"
          $BUILD_X86_FILENAME="Clash.Mini_${env:GIT_BRANCH}_${env:BUILD_VERSION}_x86.exe"
          echo "BUILD_X64_FILENAME=$BUILD_X64_FILENAME" >> $env:GITHUB_ENV
          echo "BUILD_X86_FILENAME=$BUILD_X86_FILENAME" >> $env:GITHUB_ENV
          cp .\Clash.Mini_dev_*.exe .\publish\
          echo "Ready to upload the following file(s):"
          ls .\publish

      # ‰∏ä‰º†64‰ΩçÂ∫îÁî®Âà∞Actions Artifacts
      - name: Upload x64 Application to Artifacts üì§
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.BUILD_X64_FILENAME }}
          path: ${{ env.BUILD_PATH }}\publish\*_x64.exe
          if-no-files-found: error
          retention-days: ${{ env.artifact-retention-days }}

      # ‰∏ä‰º†32‰ΩçÂ∫îÁî®Âà∞Actions Artifacts
      - name: Upload x86 Application to Artifacts üì§
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.BUILD_X86_FILENAME }}
          path: ${{ env.BUILD_PATH }}\publish\*_x86.exe
          if-no-files-found: error
          retention-days: ${{ env.artifact-retention-days }}
